/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package collegemanagementsystem;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.*;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author राधे~राधे !
 */
public class ManageRecord extends javax.swing.JFrame {//,javax.swing.Frame {
Connection con;
Statement st;
ResultSet rs;
PreparedStatement pr;
DefaultTableModel model;
public static PreparedStatement getdata;
private final JPopupMenu PopupMenu = new JPopupMenu(); 
private JMenuItem menuItem = null;
private final JPopupMenu PopupMenu1 = new JPopupMenu(); 
private JMenuItem menuItem1 = null;
private final JPopupMenu PopupMenu2 = new JPopupMenu(); 
private JMenuItem menuItem2 = null;

  /**
     * Creates new form DeleteStudent
     */
    public ManageRecord() {
        initComponents();
        connect();
        TeacherPopupMenu(this.jTable2);
        StudentPopupMenu(this.jTable1);
        EmployeePopupMenu(this.jTable3);
    }
public void connect()
{
    try
    {
      con =  DriverManager.getConnection("jdbc:mysql://localhost:3306/colmgmtsys","root","");
      st = con.createStatement();
      studentRecord();// for show student Record
      teacherRecord();
      employeeRecord();
    }
    catch(Exception e)
    {
      JOptionPane.showMessageDialog(this,e.getMessage());
    }
}
public void studentRecord()
{
    try
    {
        String sqll = "Select * from student";
        rs = st.executeQuery(sqll);
        DefaultTableModel m1 = (DefaultTableModel) jTable1.getModel();
        m1.setRowCount(0);
    while(rs.next())
   {
    m1.addRow(new Object[] 
    {
        rs.getString("id"),rs.getString("firstname"),rs.getString("lastname"),rs.getString("class"),
        rs.getString("year"),rs.getString("dob"),rs.getString("contact"),rs.getString("emailid"),
        rs.getString("gender"),rs.getString("permanentaddress"),rs.getString("presentaddress")
      
    });
   }    }
    catch(Exception e)
    {
      JOptionPane.showMessageDialog(this,e.getMessage());
    }
}
public void teacherRecord()
{
try
    {
      con =  DriverManager.getConnection("jdbc:mysql://localhost:3306/colmgmtsys","root","");
      st = con.createStatement();
      
        String sqll = "Select * from teacher";
        rs = st.executeQuery(sqll);
        DefaultTableModel m1 = (DefaultTableModel) jTable2.getModel();
        m1.setRowCount(0);
    while(rs.next())
   {
    m1.addRow(new Object[] 
    {
        rs.getString("id"),rs.getString("firstname"),rs.getString("lastname"),rs.getString("position"),
        rs.getString("age"),rs.getString("dob"),rs.getString("contact"),rs.getString("emailid"),
        rs.getString("gender"),rs.getString("permanentaddress"),rs.getString("presentaddress")
    });
   }

    }
    catch(Exception e)
    {
      JOptionPane.showMessageDialog(this,e.getMessage());
    }
}
public void employeeRecord()
{
try
    {
      con =  DriverManager.getConnection("jdbc:mysql://localhost:3306/colmgmtsys","root","");
      st = con.createStatement();
      
        String sqll = "Select * from employee";
        rs = st.executeQuery(sqll);
        DefaultTableModel m1 = (DefaultTableModel) jTable3.getModel();
        m1.setRowCount(0);
    while(rs.next())
   {
    m1.addRow(new Object[] 
    {
        rs.getString("id"),rs.getString("firstname"),rs.getString("lastname"),rs.getString("position"),
        rs.getString("age"),rs.getString("dob"),rs.getString("contact"),rs.getString("emailid"),
        rs.getString("gender"),rs.getString("permanentaddress"),rs.getString("presentaddress")
    });
   }

    }
    catch(Exception e)
    {
      JOptionPane.showMessageDialog(this,e.getMessage());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Delte Teacher Window");

        jPanel1.setBackground(new java.awt.Color(102, 255, 102));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 25, true));

        jTable1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(102, 0, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "First Name", "Last Name", "Position", "Age", "Date of Birth", "Contact No", "Email ID", "Gender", "Permanent Address", "Present Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("Papyrus", 1, 30)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("All Record");

        jLabel3.setFont(new java.awt.Font("Lucida Handwriting", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Search Record");

        jTextField2.setFont(new java.awt.Font("Franklin Gothic Book", 1, 18)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(0, 0, 204));
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTable2.setForeground(new java.awt.Color(102, 0, 102));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Teacher ID", "First Name", "Last Name", "Class", "Year", "Date of Birth", "Contact No", "Email ID", "Gender", "Permanent Address", "Present Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jTable3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTable3.setForeground(new java.awt.Color(102, 0, 102));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Position", "Age", "Date of Birth", "Contact No", "Email ID", "Gender", "Permanent Address", "Present Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jLabel4.setFont(new java.awt.Font("Engravers MT", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 51, 0));
        jLabel4.setText("Employee Record");

        jLabel5.setFont(new java.awt.Font("Engravers MT", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 255));
        jLabel5.setText("Teacher Record");

        jLabel6.setFont(new java.awt.Font("Engravers MT", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setText("Student Record");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton1.setText("<<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(499, 499, 499)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 137, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(731, 731, 731))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jLabel6)))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
public void deleteStudent()//User Defined Method for Delete one Student Record
{
      // TODO add your handling code here:
   String id =null;
   DefaultTableModel m1 = (DefaultTableModel) jTable1.getModel();
   int Row = jTable1. getSelectedRow();
  try
  {
   if(jTable1.isRowSelected(Row)==true)
    {
         id=m1.getValueAt(Row, 0).toString();
    }
  
   if(id.isEmpty())
        {
             JOptionPane.showMessageDialog(this,"Please enter ID first for delete Record");
        }     
        else 
        { 
        try
        {
            rs=st.executeQuery("select * from student");
            if(rs.next()==false)
            {
                   JOptionPane.showMessageDialog(this,"Record is empty");
            }                
            else
            {
                try
                {
                    rs=st.executeQuery("select * from student where id="+id+"");
                    if(rs.next()==true)
                    {
                        int c1 = JOptionPane.showConfirmDialog(this," Are you Really wants to delete "+id+" ID record","",JOptionPane.OK_CANCEL_OPTION);
                        if(c1 ==0)
                        {           
                        String sql="delete from student where id = "+id+" ";
                         st.executeUpdate(sql);
                        JOptionPane.showMessageDialog(this," "+id+" ID Record Delete Successfully");
                        connect();
                        }
                    }
                    else
                    {
                       JOptionPane.showMessageDialog(this,"Student Record Not found for Deletion");
                    }
                }
                catch(Exception nf)
                {
                      JOptionPane.showMessageDialog(this,"Student Record Not found for Deletion");
                }
            }
        }
        catch(Exception e1)
        {
            JOptionPane.showMessageDialog(this,e1);
        }
       }
        }    catch(Exception e1)
        {
            JOptionPane.showMessageDialog(this,e1);
        }
}
public void deleteStudentAll() //User Defined Method for Delete All Student Record
{
  String id =null;
        try
        {
            rs=st.executeQuery("select * from student");
            if(rs.next()==false)
            {
                   JOptionPane.showMessageDialog(this,"Record is empty");
            }                
            else
            {
                try
                {
                    rs=st.executeQuery("select * from student");
                    if(rs.next()==true)
                    {
                        int c1 = JOptionPane.showConfirmDialog(this,"Are you sure to Delete All Record ","",JOptionPane.OK_CANCEL_OPTION);
                        if(c1 ==0)
                        {           
                        String sql="truncate table student";
                         st.executeUpdate(sql);
                        JOptionPane.showMessageDialog(this,id+"Record Delete Successfully");
                        connect();
                        }
                    }
                    else
                    {
                       JOptionPane.showMessageDialog(this,"Student Record Not found for Deletion");
                    }
                }
                catch(Exception nf)
                {
                      JOptionPane.showMessageDialog(this,"No Student Record Not found for Deletion");
                }
            }
        }
        catch(Exception e1)
        {
            JOptionPane.showMessageDialog(this,e1);
        }
} 
public void deleteteacher()//User Defined Method for Delete one  Teacher Record
{
    //Delete one record
   String id=null;
   DefaultTableModel m1 = (DefaultTableModel) jTable2.getModel();
   int Row = jTable2. getSelectedRow();
  try
  {
   if(jTable2.isRowSelected(Row)==true)
    {
         id=m1.getValueAt(Row, 0).toString();
    }
    if(id.isEmpty())
        {
             JOptionPane.showMessageDialog(this,"Please Provide ID  Or Select row for delete");
        }     
        else 
        { 
        try
        {
            rs=st.executeQuery("select * from teacher");
            if(rs.next()==false)
            {
                   JOptionPane.showMessageDialog(this,"Record is empty");
            }                
            else
            {
                try
                {
                    rs=st.executeQuery("select * from teacher where id="+id+"");
                    if(rs.next()==true)
                    {
                        int c1 = JOptionPane.showConfirmDialog(this," Are you Really wants to delete "+id+" ID record","",JOptionPane.OK_CANCEL_OPTION);
                        if(c1 ==0)
                        {           
                        String sql="delete from teacher where id = "+id+" ";
                        st.executeUpdate(sql);
                        JOptionPane.showMessageDialog(this," "+id+" ID Record Delete Successfully");
                        connect();
                        }
                    }
                    else
                    {
                       JOptionPane.showMessageDialog(this,"Teacher Record Not found for Deletion");
                    }
                }
                catch(Exception nf)
                {
                    JOptionPane.showMessageDialog(this,"Teacher Record Not found for Deletion");
                }
            }
        }
        catch(Exception e1)
        {
            JOptionPane.showMessageDialog(this,e1);
        }
        }
  }
  catch(Exception e)
  {
    JOptionPane.showMessageDialog(this,e+"Select row first for delete record");
  }
}
public void deleteTeacherAll()//User Defined Method for Delete All Teacher Record
{
        try
        {
            rs=st.executeQuery("select * from Teacher");
            if(rs.next()==false)
            {
                   JOptionPane.showMessageDialog(this,"Record is empty");
            }                
            else
            {
                try
                {
                    rs=st.executeQuery("select * from teacher");
                    if(rs.next()==true)
                    {
                        int c1 = JOptionPane.showConfirmDialog(this,"Are you sure to Delete All Record ","",JOptionPane.OK_CANCEL_OPTION);
                        if(c1 ==0)
                        {           
                        String sql="truncate table employee";
                         st.executeUpdate(sql);
                        JOptionPane.showMessageDialog(this,"All Record Delete Successfully");
                        connect();
                        }
                    }
                    else
                    {
                       JOptionPane.showMessageDialog(this,"Teacher Record Not found for Deletion");
                    }
                }
                catch(Exception nf)
                {
                      JOptionPane.showMessageDialog(this,"No Teacher Record Not found for Deletion");
                }
            }
        }
        catch(Exception e1)
        {
            JOptionPane.showMessageDialog(this,e1);
        }
}
public void deleteEmployee()
{ 
  //Delete one record
    String id=null;
    DefaultTableModel m1 = (DefaultTableModel) jTable1.getModel();
    int Row = jTable1. getSelectedRow();
  try
  {
   if(jTable3.isRowSelected(Row)==true)
    {
         id=m1.getValueAt(Row, 0).toString();
    }
    if(id.isEmpty())
        {
             JOptionPane.showMessageDialog(this,"Please Provide ID  Or Select row for delete");
        }     
        else 
        { 
        try
        {
            rs=st.executeQuery("select * from employee");
            if(rs.next()==false)
            {
                   JOptionPane.showMessageDialog(this,"Record is empty");
            }                
            else
            {
                try
                {
                    rs=st.executeQuery("select * from employee where id="+id+"");
                    if(rs.next()==true)
                    {
                        int c1 = JOptionPane.showConfirmDialog(this," Are you Really wants to delete "+id+" ID record","",JOptionPane.OK_CANCEL_OPTION);
                        if(c1 ==0)
                        {           
                        String sql="delete from employee where id = "+id+" ";
                        st.executeUpdate(sql);
                        JOptionPane.showMessageDialog(this," "+id+" ID Record Delete Successfully");
                        connect();
                        }
                    }
                    else
                    {
                       JOptionPane.showMessageDialog(this,"Employee Record Not found for Deletion");
                    }
                }
                catch(Exception nf)
                {
                    JOptionPane.showMessageDialog(this,"Employee Record Not found for Deletion");
                }
            }
        }
        catch(Exception e1)
        {
            JOptionPane.showMessageDialog(this,e1);
        }
        }
  }
  catch(Exception e)
  {
    JOptionPane.showMessageDialog(this,e+"Select row first for delete record");
  }
}
public void deleteEmployeeAll()
{
    String id = null;
        try
        {
            rs=st.executeQuery("select * from employee");
            if(rs.next()==false)
            {
                   JOptionPane.showMessageDialog(this,"Record is empty");
            }                
            else
            {
                try
                {
                    rs=st.executeQuery("select * from employee");
                    if(rs.next()==true)
                    {
                        int c1 = JOptionPane.showConfirmDialog(this,"Are you sure to Delete All Record ","",JOptionPane.OK_CANCEL_OPTION);
                        if(c1 ==0)
                        {           
                        String sql="truncate table employee";
                         st.executeUpdate(sql);
                        JOptionPane.showMessageDialog(this,"All Record Delete Successfully");
                        connect();
                        }
                    }
                    else
                    {
                       JOptionPane.showMessageDialog(this,"Employee Record Not found for Deletion");
                    }
                }
                catch(Exception nf)
                {
                      JOptionPane.showMessageDialog(this,"No Employee Record Not found for Deletion");
                }
            }
        }
        catch(Exception e1)
        {
            JOptionPane.showMessageDialog(this,e1);
        }
   
}
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2KeyPressed

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        // TODO add your handling code here:
        String tf=jTextField2.getText();
    // try{
      
      {
        search(tf);
        searchTeacher(tf);
        searchEmployee(tf);
      }
     //}catch(Exception e){}
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jTable3MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new AdminPanelCMS().show();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
public void search(String str)
{
       //Filter Student Table
       model = (DefaultTableModel) jTable1.getModel();
       TableRowSorter<DefaultTableModel> trs =  new TableRowSorter<>(model);
       jTable1.setRowSorter(trs);
       trs.setRowFilter(RowFilter.regexFilter(str));
}
public void searchTeacher(String str)
{
 //Filter Teacher Table
        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
       
        TableRowSorter<DefaultTableModel> trs1 =  new TableRowSorter<>(model1);
       trs1.setRowFilter(null);
        jTable2.setRowSorter(trs1);
       trs1.setRowFilter(RowFilter.regexFilter(str));
   
}
public void searchEmployee(String str)
{
       //Filter employee Table
    DefaultTableModel model2 = (DefaultTableModel) jTable3.getModel();
       TableRowSorter<DefaultTableModel> trs2 =  new TableRowSorter<>(model2);
    if(str.length()==0)
    {
     trs2.setRowFilter(null);
    }
    else
    {
       jTable3.setRowSorter(trs2);
       trs2.setRowFilter(RowFilter.regexFilter(str));  
    }
 }     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageRecord().setVisible(true);
            }
        });
    }
public void TeacherPopupMenu(JTable frame)
    {
        JMenuItem modify = new JMenuItem("Modify");
        JMenuItem delete = new JMenuItem("Delete");
        JMenuItem deleteall = new JMenuItem("Delete All");
        modify.addActionListener(new ActionListener() {
            
        public void actionPerformed(ActionEvent e) {
        //JOptionPane.showMessageDialog(modify,"Are really wants to modify ");
        int cVal= JOptionPane.showConfirmDialog(modify, "Are you really wants to Modify record ","",JOptionPane.OK_CANCEL_OPTION);
        if(cVal==0)
        {
         new UpdateTeacher().show();
         dispose(); 
        }
          }
         });
      delete.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
                {
         deleteteacher();
         connect();
        }
          }
         });
      deleteall.addActionListener(new ActionListener() {
            
          public void actionPerformed(ActionEvent e) {
          //JOptionPane.showMessageDialog(modify,"Delete all record Succesfully");
          deleteTeacherAll();
          }
         });
      //add MenuItems
            PopupMenu1.add(modify);
            PopupMenu1.add(delete);
            PopupMenu1.add(deleteall);
     //How mouse can do action
            jTable2.addMouseListener(new MouseAdapter() 
            {
            public void mouseClicked(MouseEvent me)
            {
            if(SwingUtilities.isRightMouseButton(me))
            {
                PopupMenu1.show(me.getComponent(),me.getX(),me.getY());
               PopupMenu1.setPopupSize(150, 100);
            }
        }
     });
}
public void StudentPopupMenu(JTable frame)
    {
        JMenuItem modify = new JMenuItem("Modify");
        JMenuItem delete = new JMenuItem("Delete");
        JMenuItem deleteall = new JMenuItem("Delete All");
        modify.addActionListener(new ActionListener() {
            
        public void actionPerformed(ActionEvent e) {
        //JOptionPane.showMessageDialog(modify,"Are really wants to modify ");
        int cVal= JOptionPane.showConfirmDialog(modify, "Are you really wants to Modify record ","",JOptionPane.OK_CANCEL_OPTION);
        if(cVal==0)
        {
         new UpdateStudent().show();
          String sm=jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();;
         frame.setVisible(false); 
        }
          }
         });
      /*delete.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
                {
         deleteStudent();
         connect();
        }
          }
         });*/
      deleteall.addActionListener(new ActionListener() {
            
          public void actionPerformed(ActionEvent e) {
          //JOptionPane.showMessageDialog(modify,"Delete all record Succesfully");
            deleteStudentAll();
          }
         });
      //add MenuItems
            PopupMenu.add(modify);
            PopupMenu.add(delete);
            PopupMenu.add(deleteall);
     //How mouse can do action
            jTable1.addMouseListener(new MouseAdapter() 
            {
            public void mouseClicked(MouseEvent me)
            {
            if(SwingUtilities.isRightMouseButton(me))
            {
               PopupMenu.show(me.getComponent(),me.getX(),me.getY());
               PopupMenu.setPopupSize(150, 100);
            }
        }
     });
}
public void EmployeePopupMenu(JTable frame)
    {
        JMenuItem modify = new JMenuItem("Modify");
        JMenuItem delete = new JMenuItem("Delete");
        JMenuItem deleteall = new JMenuItem("Delete All");
        modify.addActionListener(new ActionListener() {
            
        public void actionPerformed(ActionEvent e) {
        //JOptionPane.showMessageDialog(modify,"Are really wants to modify ");
        int cVal= JOptionPane.showConfirmDialog(modify, "Are you really wants to Modify record ","",JOptionPane.OK_CANCEL_OPTION);
        if(cVal==0)
        {
         new UpdateEmployee().show();
         frame.setVisible(false); 
        }
          }
         });
      delete.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
                {
         deleteEmployee();
         connect();
        }
          }
         });
      deleteall.addActionListener(new ActionListener() {
            
          public void actionPerformed(ActionEvent e) {
          //JOptionPane.showMessageDialog(modify,"Delete all record Succesfully");
          deleteEmployeeAll();
          }
         });
      //add MenuItems
            PopupMenu2.add(modify);
            PopupMenu2.add(delete);
            PopupMenu2.add(deleteall);
     //How mouse can do action
            jTable3.addMouseListener(new MouseAdapter() 
            {
            public void mouseClicked(MouseEvent me)
            {
            if(SwingUtilities.isRightMouseButton(me))
            {
                PopupMenu2.show(me.getComponent(),me.getX(),me.getY());
               PopupMenu2.setPopupSize(150, 100);
            }
        }
     });
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
